[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "medai-dossier"
version = "0.1.0"
description = "Value Dossier Management System for HTA and Market Access"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Achim Dehnert", email = "achim.dehnert@example.com"}
]
keywords = ["hta", "value-dossier", "pharma", "market-access", "health-economics"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]

dependencies = [
    # Core Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    
    # Web UI
    "flask>=3.0.0",
    "jinja2>=3.1.0",
    "wtforms>=3.1.0",
    "flask-wtf>=1.2.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    
    # HTTP Client
    "httpx>=0.25.0",
    "requests>=2.31.0",
    
    # Data Processing
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "openpyxl>=3.1.0",
    
    # Document Generation
    "reportlab>=4.0.0",
    "python-docx>=1.1.0",
    "jinja2>=3.1.0",
    "weasyprint>=60.0",
    
    # Scientific Computing
    "scipy>=1.11.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
    
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.0",
    "python-multipart>=0.0.6",
    
    # Validation & Standards
    "email-validator>=2.1.0",
    "python-dateutil>=2.8.0",
    "iso8601>=2.1.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
    "rich>=13.6.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "robotframework>=6.1.0",
    "robotframework-seleniumlibrary>=6.2.0",
    
    # Code Quality
    "black>=23.9.0",
    "isort>=5.12.0",
    "mypy>=1.6.0",
    "pylint>=3.0.0",
    "bandit>=1.7.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
]

[project.urls]
Homepage = "https://github.com/achimdehnert/medai_dossier"
Repository = "https://github.com/achimdehnert/medai_dossier.git"
Issues = "https://github.com/achimdehnert/medai_dossier/issues"
Documentation = "https://github.com/achimdehnert/medai_dossier/wiki"

[project.scripts]
medai = "src.cli.main:app"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.html", "*.css", "*.js"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=src --cov-report=term-missing --cov-report=html"
testpaths = [
    "tests/unit",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_functions = [
    "test_*",
]
python_classes = [
    "Test*",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
